#! /usr/bin/env perl

use warnings;
use strict;
use File::Copy;
use File::Path;
use Getopt::Long;

my $usage = <<EOF;
Usage: $0 [<option>[=<value>]...]
Generate configuration makefile for building TensorLight.

options:
  -h, --help                 print this information
  --target=<name>            target name [tensorlight]
  --abbr=<abbr>              abbreviation for target name [tl]
  --build-dir=<path>         building directory [build]
  --install-dir=<path>       installation directory [/usr/local]
  --prefix=DIR               same as --install-dir; who comes later counts
  --pkgconfig-dir=<path>     pkgconfig directory [INSTALL_DIR/lib/pkgconfig]
  --with-cuda=<value>        set to yes if build with CUDA [no]
  --cuda-install-dir=<path>  cuda installation directory [/usr/local/cuda]
  --debug=<value>            set to yes when debugging [no]
EOF

# default options
my %opts = (
            "TARGET" => "tensorlight",
            "ABBR" => "tl",
            "BUILD_DIR" => "build",
            "INSTALL_DIR" => "/usr/local",
            "PKGCONFIG_DIR" => "/usr/local/lib/pkgconfig",
            "WITH_CUDA" => "no",
            "CUDA_INSTALL_DIR" => "/usr/local/cuda",
            "DEBUG" => "no",
           );

# parse arguments
GetOptions(
           'help' => sub {&exit_msg(0, $usage)},
           'target=s' => \$opts{TARGET},
           'abbr=s' => \$opts{ABBR},
           'build-dir=s' => \$opts{BUILD_DIR},
           'install-dir=s' => \&set_prefix,
           'prefix=s' => \&set_prefix,
           'pkgconfig-dir=s' => \$opts{PKGCONFIG_DIR},
           'with-cuda=s' => \$opts{WITH_CUDA},
           'cuda-install-dir=s' => \$opts{CUDA_INSTALL_DIR},
           'debug=s' => \$opts{DEBUG},
          ) or &exit_msg(1, $usage);

# check configuration
# TODO: check versions
my $output;
$output = `gcc --version`;
if (!defined $output or $output eq "") {
  &err_exit("gcc not installed");
}

$output = `make --version`;;
if (!defined $output or $output eq "") {
  &err_exit("make not installed");
}

$output = `pkg-config --version`;;
if (!defined $output or $output eq "") {
  &err_exit("pkg-config not installed");
}

$output = `pkg-config --modversion check`;;
if (!defined $output or $output eq "") {
  &err_exit("check not installed");
}

if ($opts{WITH_CUDA} eq "yes") {
  $output = `nvcc --version`;;
  if (!defined $output or $output eq "") {
    &err_exit("nvcc not installed");
  }
}

# get current version
my ($major, $minor, $micro);
my $version_h = "src/tl_tensor.h";
open my $version_h_fh, '<', $version_h or die "Cannot open $version_h: $!";
while (<$version_h_fh>) {
  $major = $1 if /MAJOR_VERSION \((\d)\)/;
  $minor = $1 if /MINOR_VERSION \((\d)\)/;
  $micro = $1 if /MICRO_VERSION \((\d)\)/;
}
close $version_h_fh;
if (not defined $major or not defined $minor or not defined $micro) {
  &err_exit("cannot find version macros in $version_h, maybe a bug?");
}

# print configuration to config.mk
my $config_str = <<EOF;
.SUFFIXES:
MAJOR = $major
MINOR = $minor
MICRO = $micro
EOF
foreach my $key (sort keys %opts) {
  $config_str .= "$key ?= $opts{$key}\n";
  print "$key = $opts{$key}\n";
}
my $conf_file = "config.mk";
open my $conf_fh, '>', $conf_file or die "Cannot open $conf_file: $!";
print $conf_fh $config_str;
close $conf_fh;

# subroutines

sub set_prefix {
  my $prefix = $_[1];
  $opts{INSTALL_DIR} = $prefix;
  $opts{PKGCONFIG_DIR} = "$prefix/lib/pkgconfig";
}

sub err_exit {
  my $msg = $_[0];
  print STDERR "Error: $msg\n";
  exit 1;
}

sub exit_msg {
  my $code = shift;
  my $msg = shift;
  print $msg;
  exit $code;
}

sub warn_msg {
  my $msg = shift;
  print STDERR "\e[35mWarning:\e[0m $msg\n";
}
