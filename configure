#! /usr/bin/env perl

use warnings;
use strict;

my $usage = <<EOF;
Usage: $0 [<option>[=<value>]...]
Generate configuration makefile for building TensorLight.

options:
  -h, --help                 print this information
  --target=<name>            target name, default is tensorlight
  --build-dir=<path>         building directory, default is build
  --install-dir=<path>       installation directory, default is /usr/local
  --pkgconfig-dir=<path>     pkgconfig directory, default is
                             /usr/local/lib/pkgconfig
  --with-cuda=<value>        set to yes if build with CUDA, default is no
  --cuda-install-dir=<path>  cuda installation directory, default is
                             /usr/local/cuda
  --debug=<value>            set to yes when debugging, default is no
EOF

# default options
my %opts = (
            "TARGET" => "tensorlight",
            "BUILD_DIR" => "build",
            "INSTALL_DIR" => "/usr/local",
            "PKGCONFIG_DIR" => "/usr/local/lib/pkgconfig",
            "WITH_CUDA" => "no",
            "CUDA_INSTALL_DIR" => "/usr/local/cuda",
            "DEBUG" => "no",
           );

# parse arguments
while (@ARGV > 0) {
  my $arg = shift @ARGV;
  if ($arg eq "-h" or $arg eq "--help") {
    print $usage;
    exit;
  }
  if (not $arg =~ /^--(\S+)$/) {
    &err_exit("wrong format in argument \"$arg\"");
  }
  my ($opt, $value) = split /=/, $1;
  if (not defined $value or $value eq "") {
    &err_exit("option \"$arg\" doesn't have a value");
  }
  $opt =~ s/(\S+)/\U$1/gi;
  $opt =~ s/-/_/g;
  if (not exists $opts{$opt}) {
    &err_exit("invalid option \"$arg\"");
  }
  $opts{$opt} = $value;
}

# check configuration
# TODO: check versions
my $output;
$output = `gcc --version`;
if ($output eq "") {
  &err_exit("gcc not installed");
}

$output = `make --version`;;
if ($output eq "") {
  &err_exit("make not installed");
}

$output = `pkg-config --version`;;
if ($output eq "") {
  &err_exit("pkg-config not installed");
}

$output = `pkg-config --modversion check`;;
if ($output eq "") {
  &err_exit("check not installed");
}

if ($opts{WITH_CUDA} eq "yes") {
  $output = `nvcc --version`;;
  if ($output eq "") {
    &err_exit("nvcc not installed");
  }
}

# get current version
my ($major, $minor, $micro);
my $version_h = "src/tl_tensor.h";
open my $version_h_fh, '<', $version_h or die "Cannot open $version_h: $!";
while (<$version_h_fh>) {
  $major = $1 if /MAJOR_VERSION \((\d)\)/;
  $minor = $1 if /MINOR_VERSION \((\d)\)/;
  $micro = $1 if /MICRO_VERSION \((\d)\)/;
}
close $version_h_fh;
if (not defined $major or not defined $minor or not defined $micro) {
  &err_exit("cannot find version macros in $version_h, maybe a bug?");
}

# print configuration
my $config_str = <<EOF;
.SUFFIXES:
MAJOR = $major
MINOR = $minor
MICRO = $micro
EOF
foreach my $key (sort keys %opts) {
  $config_str .= "$key ?= $opts{$key}\n";
}
my $conf_file = "config.mk";
open my $conf_fh, '>', $conf_file or die "Cannot open $conf_file: $!";
print $conf_fh $config_str;
close $conf_fh;

# subroutines
sub err_exit {
  my $msg = $_[0];
  print STDERR "Error: $msg\n";
  exit 1;
}
